extends layout
block content
  style.
    .icon-img {
      max-width: 30px;
      width: 100%;
    }
    #img_wrap .border{width:80px;}
    .bg-disable{background-color:#ccc;}
  - var sub_cate_name = '';
  each item in cate_info
    if(item.cate_id === cate_item)
      - sub_cate_name = item.cate_name;
  .container
    .bg-zhupao
      .d-flex.justify-content-between
        a(href='/')
          img(src='/assets/images/pegasus_logo.jpg', alt='logo', style='width:250px;')
        include nav
    .w-100.bg-lightblue.mb-3
      h5.m-0.text-white.p-2
        a.text-white(href='/') Home
        | &nbsp; > &nbsp;
        a.text-white(href='/list/' + cate_info[0].group_id + '/' + cate_item) #{cate_info[0].group_name}
        | &nbsp; > &nbsp; #{sub_cate_name}
    .row.pt-3
      .col-8.graph-wrap
        h4.font-weight-bold #{data.data_title}
        h5.text-right(class=data.add_img_graph.path?'invisible':'') 단위 : #{data.data_unit}
        .card.d-block
          .card-body.shadow.text-center
            if(data.add_img_graph.path)
              img(src='/downloads/' + data.add_img_graph.path.replace('temps/',''), width='100%')
            else
              canvas#chart(width='100%', height='50')
        h6.text-right.mt-3 Data No. #{data.data_no}
      .col-4
        .d-flex.mb-2
          span.px-3.py-2(style='flex:1; color:rgb(0, 32, 96); border-bottom:4px solid rgb(143, 170, 220)') DOWNLOAD
          .border-bottom-gray(style='flex:2;')
        .d-flex#img_wrap
          .border(class=data.add_png.path?'':'bg-disable')
            a.btn.d-flex.justify-content-center.p-2(href=(data.add_png.path?'/downloads/' + data.add_png.path.replace('temps/',''):'javascript:void(0);'), download='download', class=data.add_png.path?'':'disabled')
              if(data.add_png.path)
                img.icon-img(src='/assets/svgs/png.svg')
              span PNG
          .border.ml-2(class=data.add_ppt.path?'':'bg-disable')
            a.btn.d-flex.justify-content-center.p-2(href=(data.add_ppt.path?'/downloads/' + data.add_ppt.path.replace('temps/',''):'javascript:void(0);'), download='download', class=data.add_ppt.path?'':'disabled')
              if(data.add_ppt.path)
                img.icon-img(src='/assets/svgs/ppt.svg')
              span PPT
          .border.ml-2(class=data.add_img_graph.path?'bg-disable':'')
            a.btn.d-flex.justify-content-center.p-2(class=data.add_img_graph.path?'disabled':'', href='/excel/download/' + data._id)
              if(!data.add_img_graph.path)
                img.icon-img(src='/assets/svgs/xls.svg')
              span XLS
          .border.ml-2(class=data.add_pdf.path?'':'bg-disable')
            a.btn.d-flex.justify-content-center.p-2(href=(data.add_pdf.path?'/downloads/' + data.add_pdf.path.replace('temps/', ''):'javascript:void(0);'), download='download', class=data.add_pdf.path?'':'disabled')
              if(data.add_pdf.path)
                img.icon-img(src='/assets/svgs/pdf.svg')
              span PDF
        ul#pills-tab.nav.nav-pills.mt-5.mb-3.pb-2.border-bottom-gray(role="tablist")
          li.nav-item
            a#pills-home-tab.nav-link.active.rounded-0.py-1(data-toggle="pill" href="#pills-home" role="tab" aria-controls="pills-home" aria-selected="true") DESCRIPTION
          li.nav-item
            a#pills-profile-tab.nav-link.rounded-0.ml-1.py-1(data-toggle="pill" href="#pills-profile" role="tab" aria-controls="pills-profile" aria-selected="false") SOURCE
        #pills-tabContent.tab-content
          #pills-home.tab-pane.fade.show.active(role="tabpanel" aria-labelledby="pills-home-tab") #{data.description}
          #pills-profile.tab-pane.fade(role="tabpanel" aria-labelledby="pills-profile-tab") #{data.source}
        .d-flex.justify-content-start
          a(href='' + config.request_report, target='_blank', style='width:38%;')
            img(src='/assets/images/REQUEST_REPORT.jpg', width='100%')
          a(href='' + config.request_data, target='_blank', style='width:38%;')
            img(src='/assets/images/REQUEST_DATA.jpg', width='100%')
block append_js
  script(src='/bootstrap/js/dist/util.js', type='text/javascript')
  script(src='/chart.js/Chart.js')
  script(src='/assets/js/detail.js')
  script.
    console.log("data : ", !{JSON.stringify(data)})
    let d = !{JSON.stringify(data)};
    let isReverse = ["bar_chart_horizontal"].indexOf(d.chart_type) > -1;
    let labelDisplay = true;
    console.log('d : ', d);
    if(d.add_img_graph){

    }else{
      // 차트 색 설정
      let bg_list = [
        'rgba(191, 191, 191, 1)', 
        'rgba(189, 215, 238, 1)', 
        'rgba(188, 199, 231, 1)', 
        'rgba(143, 170, 220, 1)', 
        'rgba(158, 202, 225, 1)', 
        'rgba(107, 174, 214, 1)',
        'rgba(60, 148, 222, 1)',
        'rgba(24, 91, 162, 1)',
        'rgba(5, 44, 111, 1)',
        'rgba(5, 9, 47, 1)',
      ];
      if(isReverse){
        bg_list = [
        'rgba(5, 9, 47, 1)',
        'rgba(5, 44, 111, 1)',
        'rgba(24, 91, 162, 1)',
        'rgba(60, 148, 222, 1)',
        'rgba(107, 174, 214, 1)',
        'rgba(158, 202, 225, 1)', 
        'rgba(143, 170, 220, 1)', 
        'rgba(188, 199, 231, 1)', 
        'rgba(189, 215, 238, 1)', 
        'rgba(191, 191, 191, 1)', 
      ];
      }
      // 차트 타입
      let chart_type = '';
      switch (d.chart_type) {
        case 'bar_chart_vertical':
        case 'comboBarLine_chart':
          chart_type = 'bar';
          break;
        case 'bar_chart_horizontal':
          chart_type = 'horizontalBar';
          break;
        case 'pie_chart':
          chart_type = 'pie';
          break;
        case 'line_chart':
        case 'multiline_chart':
        case 'diffPoint_chart':
        case 'stackedArea_chart':
        case 'stepLine_chart':
          chart_type = 'line';
          break;
        case 'radar_chart':
          chart_type = 'radar';
          break;
        case 'polarArea_chart':
          chart_type = 'polarArea';
          break;
      }
      let x = d.table_x;
      let y = d.table_y;
      let ChartData = {};

      // 파이차트의 경우 좌표를 재배열해준다.
      if (chart_type === 'pie') {
        ChartData.datasets = [];
        ChartData.labels = y.map(function (v) {
          return v.title
        });

        let size = x.content.length;
        // y 축 자료 피벗
        for (let i = 0; i < size; i++) {
          let new_y = {};
          let arr = [];
          let bg_arr = [];
          y.forEach(function (v, idx) {
            arr.push(v.content[i]);
            bg_arr.push(bg_list[idx % bg_list.length]);
          });
          new_y.data = arr;
          // new_y.label = x.content[i];
          new_y.label = x.content;
          new_y.backgroundColor = bg_arr;
          ChartData.datasets.push(new_y);
        }
        ChartData.datasets.sort(function (a, b) {
          return a.label < b.label ? 1 : -1
        });
      }
      // polarArea chart 의 경우, 각각의 x 항목마다 색을 다르게 표시한다
      // 즉, 각각의 x 항목이 별개의 데이터 셋을 구성한다. 
      else if(d.chart_type === 'polarArea_chart'){
        let backgroundList = d.table_y[0].content.map(function(m, i){return bg_list[i % 6]});
        ChartData.labels = d.table_x.content;
        ChartData.datasets = [
          {data:d.table_y[0].content,
          backgroundColor:backgroundList,
          borderColor:backgroundList}
        ];
      } else {
        if(isReverse) ChartData.labels = d.table_x.content.reverse();
        else ChartData.labels = d.table_x.content;
        ChartData.datasets = [];
        d.table_y.forEach(function (row, idx) {
          let obj = {};
          if(d.chart_type === 'comboBarLine_chart'){
            if(idx === 0) obj.type = 'line';
            else obj.type = 'bar';
          }else{
            obj.type = chart_type;
          }
          //- obj.label = x.content;
          obj.label = row.title;
          if(isReverse){
            obj.data = row.content.reverse();
          }else{
            obj.data = row.content;
          }
          if(d.chart_type === 'bar_chart_horizontal' && row.content.length === 1){
            obj.backgroundColor = bg_list[idx % bg_list.length];
          }else{
            let i = 0
            obj.backgroundColor = row.content.map(function(v, rowNum){
              return bg_list[(d.table_y.length > 1 ? idx:rowNum) % bg_list.length]
            });
            if((d.chart_type === 'bar_chart_horizontal' && d.table_y.length === 1) || (d.chart_type === 'bar_chart_vertical' && d.table_y.length === 1)) labelDisplay = false;
          }
          //- obj.backgroundColor = bg_list[idx % bg_list.length];
          obj.fill = false;
          obj.borderColor = bg_list[idx % bg_list.length];
          if(d.chart_type === 'radar_chart' || d.chart_type === 'stackedArea_chart'){
            obj.fill = true;
          }
          if(d.chart_type === 'diffPoint_chart'){
            obj.borderDash = [idx * 2, idx * 2];
          }
          if(d.chart_type === 'stepLine_chart'){
            obj.steppedLine = 'middle';
          }
          ChartData.datasets.push(obj);
        });
      }
      let ctx = document.getElementById('chart');
      let chart = new Chart(ctx, {
        type: chart_type,
        data: ChartData,
        options: {
          scales: {
            xAxes: [{
              stacked: (['comboBarLine_chart'].indexOf(d.chart_type) > -1?false:true),
              gridLines:{
                //- drawOnChartArea:isReverse?true:false,
                display:isReverse?true:false,
              },
              ticks:{
                display:['pie_chart'].indexOf(d.chart_type) > -1 ? false : true
              }
            }],
            yAxes: [{
              stacked: (['stackedArea_chart', 'bar_chart_horizontal', 'bar_chart_vertical'].indexOf(d.chart_type) > -1 ? true:false),
              gridLines:{
                //- drawOnChartArea:isReverse?true:false,
                display:isReverse?true:false,
              },
              ticks:{
                display:['pie_chart'].indexOf(d.chart_type) > -1 ? false : true
              },
            }]
          },
          responsive:true,
          legend:{
            display:labelDisplay?true:false,
            position:['pie_chart'].indexOf(d.chart_type) > -1 ?'bottom':'top'
          },
          elements:{
            line:{
              tension:['line_chart'].indexOf(d.chart_type) > -1 ? 0: 0.4
            }
          }
        }
      });
    }
